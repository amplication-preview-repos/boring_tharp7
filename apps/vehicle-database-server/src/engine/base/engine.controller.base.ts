/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EngineService } from "../engine.service";
import { EngineCreateInput } from "./EngineCreateInput";
import { Engine } from "./Engine";
import { EngineFindManyArgs } from "./EngineFindManyArgs";
import { EngineWhereUniqueInput } from "./EngineWhereUniqueInput";
import { EngineUpdateInput } from "./EngineUpdateInput";

export class EngineControllerBase {
  constructor(protected readonly service: EngineService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Engine })
  async createEngine(@common.Body() data: EngineCreateInput): Promise<Engine> {
    return await this.service.createEngine({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Engine] })
  @ApiNestedQuery(EngineFindManyArgs)
  async engines(@common.Req() request: Request): Promise<Engine[]> {
    const args = plainToClass(EngineFindManyArgs, request.query);
    return this.service.engines({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Engine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async engine(
    @common.Param() params: EngineWhereUniqueInput
  ): Promise<Engine | null> {
    const result = await this.service.engine({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Engine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEngine(
    @common.Param() params: EngineWhereUniqueInput,
    @common.Body() data: EngineUpdateInput
  ): Promise<Engine | null> {
    try {
      return await this.service.updateEngine({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Engine })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEngine(
    @common.Param() params: EngineWhereUniqueInput
  ): Promise<Engine | null> {
    try {
      return await this.service.deleteEngine({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
