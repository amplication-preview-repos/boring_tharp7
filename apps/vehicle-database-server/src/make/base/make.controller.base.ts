/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MakeService } from "../make.service";
import { MakeCreateInput } from "./MakeCreateInput";
import { Make } from "./Make";
import { MakeFindManyArgs } from "./MakeFindManyArgs";
import { MakeWhereUniqueInput } from "./MakeWhereUniqueInput";
import { MakeUpdateInput } from "./MakeUpdateInput";

export class MakeControllerBase {
  constructor(protected readonly service: MakeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Make })
  async createMake(@common.Body() data: MakeCreateInput): Promise<Make> {
    return await this.service.createMake({
      data: data,
      select: {
        active: true,
        created_at: true,
        id: true,
        make_name: true,
        updated_at: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Make] })
  @ApiNestedQuery(MakeFindManyArgs)
  async makes(@common.Req() request: Request): Promise<Make[]> {
    const args = plainToClass(MakeFindManyArgs, request.query);
    return this.service.makes({
      ...args,
      select: {
        active: true,
        created_at: true,
        id: true,
        make_name: true,
        updated_at: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Make })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async make(
    @common.Param() params: MakeWhereUniqueInput
  ): Promise<Make | null> {
    const result = await this.service.make({
      where: params,
      select: {
        active: true,
        created_at: true,
        id: true,
        make_name: true,
        updated_at: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Make })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMake(
    @common.Param() params: MakeWhereUniqueInput,
    @common.Body() data: MakeUpdateInput
  ): Promise<Make | null> {
    try {
      return await this.service.updateMake({
        where: params,
        data: data,
        select: {
          active: true,
          created_at: true,
          id: true,
          make_name: true,
          updated_at: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Make })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMake(
    @common.Param() params: MakeWhereUniqueInput
  ): Promise<Make | null> {
    try {
      return await this.service.deleteMake({
        where: params,
        select: {
          active: true,
          created_at: true,
          id: true,
          make_name: true,
          updated_at: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
