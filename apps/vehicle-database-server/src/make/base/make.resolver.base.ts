/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Make } from "./Make";
import { MakeFindManyArgs } from "./MakeFindManyArgs";
import { MakeFindUniqueArgs } from "./MakeFindUniqueArgs";
import { CreateMakeArgs } from "./CreateMakeArgs";
import { UpdateMakeArgs } from "./UpdateMakeArgs";
import { DeleteMakeArgs } from "./DeleteMakeArgs";
import { MakeService } from "../make.service";
@graphql.Resolver(() => Make)
export class MakeResolverBase {
  constructor(protected readonly service: MakeService) {}

  @graphql.Query(() => [Make])
  async makes(@graphql.Args() args: MakeFindManyArgs): Promise<Make[]> {
    return this.service.makes(args);
  }

  @graphql.Query(() => Make, { nullable: true })
  async make(@graphql.Args() args: MakeFindUniqueArgs): Promise<Make | null> {
    const result = await this.service.make(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Make)
  async createMake(@graphql.Args() args: CreateMakeArgs): Promise<Make> {
    return await this.service.createMake({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Make)
  async updateMake(@graphql.Args() args: UpdateMakeArgs): Promise<Make | null> {
    try {
      return await this.service.updateMake({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Make)
  async deleteMake(@graphql.Args() args: DeleteMakeArgs): Promise<Make | null> {
    try {
      return await this.service.deleteMake(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
