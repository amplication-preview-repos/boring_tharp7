/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { YearService } from "../year.service";
import { YearCreateInput } from "./YearCreateInput";
import { Year } from "./Year";
import { YearFindManyArgs } from "./YearFindManyArgs";
import { YearWhereUniqueInput } from "./YearWhereUniqueInput";
import { YearUpdateInput } from "./YearUpdateInput";

export class YearControllerBase {
  constructor(protected readonly service: YearService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Year })
  async createYear(@common.Body() data: YearCreateInput): Promise<Year> {
    return await this.service.createYear({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Year] })
  @ApiNestedQuery(YearFindManyArgs)
  async years(@common.Req() request: Request): Promise<Year[]> {
    const args = plainToClass(YearFindManyArgs, request.query);
    return this.service.years({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Year })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async year(
    @common.Param() params: YearWhereUniqueInput
  ): Promise<Year | null> {
    const result = await this.service.year({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Year })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateYear(
    @common.Param() params: YearWhereUniqueInput,
    @common.Body() data: YearUpdateInput
  ): Promise<Year | null> {
    try {
      return await this.service.updateYear({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Year })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteYear(
    @common.Param() params: YearWhereUniqueInput
  ): Promise<Year | null> {
    try {
      return await this.service.deleteYear({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
